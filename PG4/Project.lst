Microsoft (R) Macro Assembler Version 14.00.24210.0	    08/06/17 21:25:05
;Sorting Random Integers     (program4_Rico_Christopher.asm  Page 1 - 1


				TITLE Sorting Random Integers     (program4_Rico_Christopher.asm)

				; Author: Christopher Rico
				; Course / Project ID CS 271 / Program 4
				; Date: 8/6/17
				; Description: Introduce the program
				;				Get user input for how many random integers they would like to be generated
				;				Generate the integers and store them in an array.
				;				Display the unsorted array, 10 numbers per line
				;				Sort the array in descending order
				;				Calculate and display the median, rounded to the nearest integer
				;				Display the sorted array, 10 numbers per line

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN = 10
 = 000000C8			MAX = 200

 00000000			.data
				;text to be displayed on screen
 00000000 53 6F 72 74 69	intro_1			BYTE	"Sorting Random Integers: Programmed by Christopher Rico", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 3A 20
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 43
	   68 72 69 73 74
	   6F 70 68 65 72
	   20 52 69 63 6F
	   00
 00000038 54 68 69 73 20	intro_2			BYTE	"This program generates random numbers in the range 100 - 999,", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 31 30 30 20
	   2D 20 39 39 39
	   2C 00
 00000076 64 69 73 70 6C	intro_3			BYTE	"displays the original list, sorts the list, ", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 00
 000000A3 61 6E 64 20 63	intro_4			BYTE	"and calculates the median value.", 0
	   61 6C 63 75 6C
	   61 74 65 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 2E 00
 000000C4 46 69 6E 61 6C	intro_5			BYTE	"Finally, it displays the list sorted in descending order.", 0
	   6C 79 2C 20 69
	   74 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 00
 000000FE 48 6F 77 20 6D	prompt_1		BYTE	"How many numbers should be generated? Pick a number 10 - 200: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 50 69
	   63 6B 20 61 20
	   6E 75 6D 62 65
	   72 20 31 30 20
	   2D 20 32 30 30
	   3A 20 00
 0000013D 54 68 65 20 75	unsorted_1		BYTE	"The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
 0000015A 54 68 65 20 6D	median_1		BYTE	"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 00000169 54 68 65 20 73	sorted_1		BYTE	"The sorted list:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00
 0000017A 4F 75 74 20 6F	vali			BYTE	"Out of range. Please enter a number 10 - 200: ", 0
	   66 20 72 61 6E
	   67 65 2E 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 31 30 20 2D
	   20 32 30 30 3A
	   20 00
 000001A9 20 20 20 00		spaces			BYTE	"   ", 0

				;values input by user
 000001AD 00000000		userChoice		DWORD	?

				;variables for calculations
 000001B1 0000000A		tenLine			DWORD	10
 000001B5 00000000		writeCount		DWORD	0	;count of random numbers generated
 000001B9  000000C8 [		list			DWORD	MAX DUP(?)
	    00000000
	   ]
 000004D9 00000000		medLow			DWORD	?
 000004DD 00000000		medhi			DWORD	?
 000004E1 00000002		two				DWORD	2
 000004E5 00000004		four			DWORD	4

 00000000			.code
 00000000			main PROC

 00000000  E8 00000093			call	intro

				;call function that gets the user's choice for how many random integers to print
 00000005  68 000001AD R		push	OFFSET userChoice
 0000000A  E8 000000D5			call	getUserData

				;seeds a random number
 0000000F  E8 00000000 E		call	Randomize

				;call function that fills the array with random numbers
 00000014  68 000001B9 R		push	OFFSET list
 00000019  FF 35 000001AD R		push	userChoice
 0000001F  E8 0000011F			call	fillArray

				;display the list header "Unsorted list" and the list, 10 ints per line
 00000024  BA 0000013D R		mov		edx, OFFSET unsorted_1
 00000029  E8 00000000 E		call	WriteString
 0000002E  E8 00000000 E		call	CrLf
 00000033  68 000001B9 R		push	OFFSET list
 00000038  FF 35 000001AD R		push	userChoice
 0000003E  E8 00000122			call	displayList

				;sort the list
 00000043  68 000001B9 R		push	OFFSET list
 00000048  FF 35 000001AD R		push	userChoice
 0000004E  E8 00000154			call	sortList

				;display the median header "the median is" and then calculate/display the median
 00000053  E8 00000000 E		call	CrLF
 00000058  BA 0000015A R		mov		edx, OFFSET median_1
 0000005D  E8 00000000 E		call	WriteString
 00000062  68 000001B9 R		push	OFFSET list
 00000067  FF 35 000001AD R		push	userChoice
 0000006D  E8 0000016A			call	displayMedian

				;display the list header "sorted list" then display the sorted list
 00000072  BA 00000169 R		mov		edx, OFFSET sorted_1
 00000077  E8 00000000 E		call	WriteString
 0000007C  E8 00000000 E		call	CrLf
 00000081  68 000001B9 R		push	OFFSET list
 00000086  FF 35 000001AD R		push	userChoice
 0000008C  E8 000000D4			call	displayList

					exit	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess
 00000098			main ENDP


				;***************************************************************
				;						PROCEDURES							   *
				;***************************************************************

				;*************************************************************
				;* Intro procedure
				;* Introduces program and gives user instructions
				;* Receives: Intro 1 - Intro 5
				;* Returns: Nothing
				;* Preconditions: Intro 1 - Intro 5 must be strings
				;* Registers changed: EDX
				;*************************************************************
 00000098			intro PROC

 00000098  BA 00000000 R		mov		edx, OFFSET intro_1
 0000009D  E8 00000000 E		call	WriteString
 000000A2  E8 00000000 E		call	CrLf
 000000A7  E8 00000000 E		call	CrLf

 000000AC  BA 00000038 R		mov 	edx, OFFSET intro_2
 000000B1  E8 00000000 E		call	WriteString
 000000B6  E8 00000000 E		call	CrLf

 000000BB  BA 00000076 R		mov 	edx, OFFSET intro_3
 000000C0  E8 00000000 E		call	WriteString
 000000C5  BA 000000A3 R		mov		edx, OFFSET intro_4
 000000CA  E8 00000000 E		call	WriteString
 000000CF  E8 00000000 E		call    CrLf

 000000D4  BA 000000C4 R		mov		edx, OFFSET intro_5
 000000D9  E8 00000000 E		call	WriteString
 000000DE  E8 00000000 E		call	CrLf

 000000E3  C3				ret
 000000E4			intro ENDP


				;*************************************************************
				;* getUserData procedure
				;* Asks user for number of random ints user would like
				;* Receives: userChoice, prompt1
				;* Returns: puts user's choice into userChoice variable
				;* Preconditions: userChoice must be DWORD, prompt1 must be string
				;* Registers changed: EDX, EAX
				;*************************************************************
 000000E4			getUserData PROC

 000000E4  55					push	ebp
 000000E5  8B EC				mov		ebp, esp
 000000E7  8B 5D 08				mov		ebx, [ebp+8]			;move address of userChoice into ebx

				;prompt user
 000000EA  E8 00000000 E			call	CrLf
 000000EF  BA 000000FE R			mov 	edx, OFFSET prompt_1
 000000F4  E8 00000000 E			call	WriteString

				;get user data
 000000F9				input:
 000000F9  E8 00000000 E			call	ReadInt
 000000FE  89 03				mov		[ebx], eax

				;validate user data
 00000100  8B 03				mov		eax, [ebx]
 00000102  83 F8 0A				cmp		eax, MIN
 00000105  7C 09				jl		reprompt
 00000107  3D 000000C8				cmp		eax, MAX
 0000010C  7F 02				jg		reprompt

 0000010E  EB 2A				jmp		continue


				;validation prompts if needed
 00000110				reprompt:
 00000110  E8 00000000 E			call	CrLf
 00000115  B8 000000C0				mov		eax, black +(lightRed * 16) ;set text->black, background->red to alert user
 0000011A  E8 00000000 E			call	SetTextColor
 0000011F  BA 0000017A R			mov		edx, OFFSET vali						;"Not in range! Enter a number 1 - 400"
 00000124  E8 00000000 E			call	WriteString
 00000129  E8 00000000 E			call	CrLf
 0000012E  B8 00000007				mov		eax, lightGray +(black * 16) ;return text to std colors
 00000133  E8 00000000 E			call	SetTextColor

 00000138  EB BF				jmp		input

 0000013A				continue:
 0000013A  E8 00000000 E			call	CrLf
 0000013F  5D					pop		ebp
 00000140  C2 0004				ret		4

 00000143			getUserData ENDP

				;*************************************************************
				;*fillArray procedure
				; *	 Fill an array with random numbers
				; *Receives:	     list: @array and userChoice: number of array elements
				; *Returns:			 nothing
				; *Preconditions:	 userChoice must be set to an integer between 10 and 200
				; *Registers Changed: EAX, ECX, ESI
				;*************************************************************
 00000143			fillArray PROC

 00000143  55					push	ebp
 00000144  8B EC				mov		ebp, esp
 00000146  8B 75 0C				mov		esi, [ebp+12] ; @list
 00000149  8B 4D 08				mov		ecx, [ebp+8]  ; loop control based on userChoice

 0000014C				arrayLoop:
 0000014C  B8 00000383				mov		eax, 899	; set range of numbers to be generated
 00000151  40					inc		eax
 00000152  E8 00000000 E			call	RandomRange
 00000157  83 C0 64				add		eax, 100
 0000015A  89 06				mov		[esi], eax	 ;put random number in array
 0000015C  83 C6 04				add		esi, 4		 ;next element
 0000015F  E2 EB				loop	arrayLoop

 00000161  5D					pop		ebp
 00000162  C2 0008				ret 8

 00000165			fillArray ENDP


				;*************************************************************
				; *displayList procedure
				; *Description :		 Prints out userChoice number of values in list MIN numbers per row
				; *Receives:			 list: @array and userChoice: number of array elements
				; *Returns:				 nothing
				; *Preconditions:		 userChoice must be set to an integer between 10 and 200
				; *Registers Changed:	 eax, ecx, ebx, edx
				;*************************************************************
 00000165			displayList PROC

				;set up stack record and prep for loop
 00000165  55					push	ebp
 00000166  8B EC				mov		ebp, esp
 00000168  8B 75 0C				mov		esi, [ebp+12]  ;array address
 0000016B  8B 4D 08				mov		ecx, [ebp+8]   ;how many nuumbers to print
 0000016E  BB 00000000				mov		ebx, 0		   ;to keep track of numbers per line

				;display a number
 00000173				display:
 00000173  8B 06				mov		eax, [esi]
 00000175  E8 00000000 E			call	WriteDec
 0000017A  BA 000001A9 R			mov		edx, OFFSET spaces
 0000017F  E8 00000000 E			call	WriteString

				;check to see if a carriage return needed
 00000184  43					inc		ebx
 00000185  83 FB 0A				cmp		ebx, 10
 00000188  75 0A				jne		noLineDown
 0000018A  E8 00000000 E			call	CrLf
 0000018F  BB 00000000				mov		ebx, 0

 00000194				noLineDown:
 00000194  83 C6 04				add		esi, 4
 00000197  E2 DA				loop	display

				;clean up the stack and return
 00000199  E8 00000000 E			call	CrLf
 0000019E  E8 00000000 E			call	CrLf

 000001A3  5D					pop		ebp
 000001A4  C2 0008				ret		8

 000001A7			displayList ENDP


				;*************************************************************
				; *sortList procedure
				; *Description :		 sorts array in descending order
				; *Receives:			 list: @array and userChoice: number of array elements
				; *Returns:				 nothing
				; *Preconditions:		 userChoice must be set to an integer between 10 and 200
				; *Registers Changed:	 eax, ecx, ebx, edx
				;*************************************************************
 000001A7			sortList PROC
				;set up stack record and prep for loop
 000001A7  55					push	ebp
 000001A8  8B EC				mov		ebp, esp
 000001AA  8B 4D 08				mov		ecx, [ebp+8]   ;how many numbers to sort through
 000001AD  49					dec		ecx

				;set up outer loop
 000001AE				sortLoop1:
 000001AE  8B 75 0C				mov		esi, [ebp+12]  ;array address
 000001B1  51					push	ecx

					;inner loop to check and swap the numbers
 000001B2					sortLoop2:
 000001B2  8B 06					mov		eax, [esi]
 000001B4  3B 46 04					cmp		eax, [esi + 4]	;if the higher index number is less,
 000001B7  7D 06					jge		noSwap			;don't swap them
 000001B9  56						push	esi
 000001BA  E8 0000000C					call	exchange

 000001BF					noSwap:
 000001BF  83 C6 04					add		esi,4			; get the next index, loop through array
 000001C2  E2 EE					loop	sortLoop2

 000001C4  59					pop		ecx
 000001C5  E2 E7				loop	sortLoop1

 000001C7  5D					pop		ebp
 000001C8  C2 0008				ret		8

 000001CB			sortlist ENDP


				;*************************************************************
				; *exchange procedure
				; *Description :		 exchanges two array elements
				; *Receives:			 two values by reference
				; *Returns:				 nothing
				; *Preconditions:		 userChoice must be set to an integer between 10 and 200
				; *Registers Changed:	eax, edi
				;*************************************************************
 000001CB			exchange PROC

				;set up stack record and get array index into edi
 000001CB  55					push	ebp
 000001CC  8B EC				mov		ebp, esp
 000001CE  8B 7D 08				mov		edi, [ebp + 8]

				;swap values
 000001D1  8B 07				mov		eax, [edi]
 000001D3  87 47 04				xchg	eax, [edi + 4]
 000001D6  89 07				mov		[edi], eax

 000001D8  5D					pop ebp
 000001D9  C2 0004				ret 4

 000001DC			exchange ENDP


				;*************************************************************
				; *displayMedian procedure
				; *Description :		 finds the median of a sorted array
				; *Receives:			 @ array , and userChoice, the size of the array
				; *Returns:				 nothing
				; *Preconditions:		 userChoice must be set to an integer between 10 and 200
				; *Registers Changed:	esi, eax, edx, ecx
				;*************************************************************
 000001DC			displayMedian PROC

				;set up stack frame
 000001DC  55					push	ebp
 000001DD  8B EC				mov		ebp, esp

 000001DF  8B 75 0C				mov		esi, [ebp+12]	 ; @ array
 000001E2  8B 45 08				mov		eax, [ebp+8]	;get number of array elements

				;go to the middle of the array
 000001E5  BA 00000000				mov		edx, 0
 000001EA  F7 35 000004E1 R			div		two
 000001F0  8B C8				mov		ecx, eax

 000001F2					medLoop:
 000001F2  83 C6 04					add		esi, 4
 000001F5  E2 FB					loop	medLoop


				;check to see whether even or uneven number of elements in array

 000001F7  83 FA 00				cmp		edx, 0
 000001FA  75 17				jnz		oddNum

				;if it's even
 000001FC  8B 06				mov		eax, [esi]
 000001FE  03 46 FC				add		eax, [esi-4]
 00000201  BA 00000000				mov		edx, 0
 00000206  F7 35 000004E1 R			div		two
 0000020C  E8 00000000 E			call	WriteDec
 00000211  EB 07				jmp		endDM

				;if it's odd
 00000213				oddNum:
 00000213  8B 06				mov		eax, [esi]
 00000215  E8 00000000 E			call	WriteDec

 0000021A				endDM:
 0000021A  E8 00000000 E			call	CrLf
 0000021F  E8 00000000 E			call	CrLf
 00000224  5D					pop		ebp
 00000225  C2 0008				ret		8

 00000228				displayMedian ENDP


				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    08/06/17 21:25:05
;Sorting Random Integers     (program4_Rico_Christopher.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004E9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000228 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 00000042 Public STDCALL
  display  . . . . . . . . . . .	L Near	 00000173 _TEXT	
  noLineDown . . . . . . . . . .	L Near	 00000194 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001DC _TEXT	Length= 0000004C Public STDCALL
  medLoop  . . . . . . . . . . .	L Near	 000001F2 _TEXT	
  oddNum . . . . . . . . . . . .	L Near	 00000213 _TEXT	
  endDM  . . . . . . . . . . . .	L Near	 0000021A _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001CB _TEXT	Length= 00000011 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000143 _TEXT	Length= 00000022 Public STDCALL
  arrayLoop  . . . . . . . . . .	L Near	 0000014C _TEXT	
getUserData  . . . . . . . . . .	P Near	 000000E4 _TEXT	Length= 0000005F Public STDCALL
  input  . . . . . . . . . . . .	L Near	 000000F9 _TEXT	
  reprompt . . . . . . . . . . .	L Near	 00000110 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000013A _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 0000004C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000098 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000001A7 _TEXT	Length= 00000024 Public STDCALL
  sortLoop1  . . . . . . . . . .	L Near	 000001AE _TEXT	
  sortLoop2  . . . . . . . . . .	L Near	 000001B2 _TEXT	
  noSwap . . . . . . . . . . . .	L Near	 000001BF _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
four . . . . . . . . . . . . . .	DWord	 000004E5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000038 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 00000076 _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000000A3 _DATA	
intro_5  . . . . . . . . . . . .	Byte	 000000C4 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	DWord	 000001B9 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
medLow . . . . . . . . . . . . .	DWord	 000004D9 _DATA	
medhi  . . . . . . . . . . . . .	DWord	 000004DD _DATA	
median_1 . . . . . . . . . . . .	Byte	 0000015A _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000000FE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_1 . . . . . . . . . . . .	Byte	 00000169 _DATA	
spaces . . . . . . . . . . . . .	Byte	 000001A9 _DATA	
tenLine  . . . . . . . . . . . .	DWord	 000001B1 _DATA	
two  . . . . . . . . . . . . . .	DWord	 000004E1 _DATA	
unsorted_1 . . . . . . . . . . .	Byte	 0000013D _DATA	
userChoice . . . . . . . . . . .	DWord	 000001AD _DATA	
vali . . . . . . . . . . . . . .	Byte	 0000017A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writeCount . . . . . . . . . . .	DWord	 000001B5 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
